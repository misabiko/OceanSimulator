//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/BoatInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BoatInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BoatInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BoatInputAction"",
    ""maps"": [
        {
            ""name"": ""Boat Controller"",
            ""id"": ""3ec8b694-9750-4854-9349-b1ba2332f8ac"",
            ""actions"": [
                {
                    ""name"": ""Move forward"",
                    ""type"": ""Value"",
                    ""id"": ""3ff98b4f-6596-4179-b7be-aff6759b70e8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move paddle"",
                    ""type"": ""Value"",
                    ""id"": ""db97217b-1aa8-496e-8b59-78bb3d1ce645"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c4fce6a2-1710-4055-b548-3e5b1452d101"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90828526-ba79-4a2f-b1c5-0dc441e93035"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move paddle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Boat Controller
        m_BoatController = asset.FindActionMap("Boat Controller", throwIfNotFound: true);
        m_BoatController_Moveforward = m_BoatController.FindAction("Move forward", throwIfNotFound: true);
        m_BoatController_Movepaddle = m_BoatController.FindAction("Move paddle", throwIfNotFound: true);
    }

    ~@BoatInputAction()
    {
        UnityEngine.Debug.Assert(!m_BoatController.enabled, "This will cause a leak and performance issues, BoatInputAction.BoatController.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Boat Controller
    private readonly InputActionMap m_BoatController;
    private List<IBoatControllerActions> m_BoatControllerActionsCallbackInterfaces = new List<IBoatControllerActions>();
    private readonly InputAction m_BoatController_Moveforward;
    private readonly InputAction m_BoatController_Movepaddle;
    public struct BoatControllerActions
    {
        private @BoatInputAction m_Wrapper;
        public BoatControllerActions(@BoatInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moveforward => m_Wrapper.m_BoatController_Moveforward;
        public InputAction @Movepaddle => m_Wrapper.m_BoatController_Movepaddle;
        public InputActionMap Get() { return m_Wrapper.m_BoatController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BoatControllerActions set) { return set.Get(); }
        public void AddCallbacks(IBoatControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_BoatControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BoatControllerActionsCallbackInterfaces.Add(instance);
            @Moveforward.started += instance.OnMoveforward;
            @Moveforward.performed += instance.OnMoveforward;
            @Moveforward.canceled += instance.OnMoveforward;
            @Movepaddle.started += instance.OnMovepaddle;
            @Movepaddle.performed += instance.OnMovepaddle;
            @Movepaddle.canceled += instance.OnMovepaddle;
        }

        private void UnregisterCallbacks(IBoatControllerActions instance)
        {
            @Moveforward.started -= instance.OnMoveforward;
            @Moveforward.performed -= instance.OnMoveforward;
            @Moveforward.canceled -= instance.OnMoveforward;
            @Movepaddle.started -= instance.OnMovepaddle;
            @Movepaddle.performed -= instance.OnMovepaddle;
            @Movepaddle.canceled -= instance.OnMovepaddle;
        }

        public void RemoveCallbacks(IBoatControllerActions instance)
        {
            if (m_Wrapper.m_BoatControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBoatControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_BoatControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BoatControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BoatControllerActions @BoatController => new BoatControllerActions(this);
    public interface IBoatControllerActions
    {
        void OnMoveforward(InputAction.CallbackContext context);
        void OnMovepaddle(InputAction.CallbackContext context);
    }
}
