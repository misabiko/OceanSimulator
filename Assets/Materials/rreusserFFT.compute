//https://github.com/rreusser/glsl-fft/blob/master/index.glsl
#pragma kernel CSMain

//For some reason, this is 0
// const float TWOPI = 6.283185307179586;

Texture2D<float4> src;
RWTexture2D<float4> output;

float2 oneOverResolution;
float subtransformSize;
bool horizontal;
bool forward;
float normalization;

float2 test;
float2 test2;
float2 test3;
float2 test4;
float2 test5;

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float TWOPI = 6.283185307179586;

    float2 evenPos, oddPos, twiddle, outputA, outputB;
    float4 even, odd;
    float index, evenIndex, twiddleArgument;

    float2 fragCoord = float2(id.x + 0.5, id.y + 0.5);

    index = (horizontal ? fragCoord.x : fragCoord.y) - 0.5;

    evenIndex = floor(index / subtransformSize) *
        (subtransformSize * 0.5) +
        fmod(index, subtransformSize * 0.5) +
        0.5;

    if (horizontal)
    {
        evenPos = float2(evenIndex, fragCoord.y);
        oddPos = float2(evenIndex, fragCoord.y);
    }
    else
    {
        evenPos = float2(fragCoord.x, evenIndex);
        oddPos = float2(fragCoord.x, evenIndex);
    }

    //TODO We might be able to avoid divide and re-multiply by resolution
    evenPos *= oneOverResolution;
    oddPos *= oneOverResolution;

    if (horizontal)
        oddPos.x += 0.5;
    else
        oddPos.y += 0.5;

    even = src[evenPos / oneOverResolution];
    odd = src[oddPos / oneOverResolution];

    twiddleArgument = (forward ? TWOPI : -TWOPI) * (index / subtransformSize);
    twiddle = float2(cos(twiddleArgument), sin(twiddleArgument));

    output[id.xy] = (even.rgba + float4(
        twiddle.x * odd.xz - twiddle.y * odd.yw,
        twiddle.y * odd.xz + twiddle.x * odd.yw
    ).xzyw) * normalization;
}