#pragma kernel CSMain

//Height frequencies
RWTexture2D<float4> DispFreqX;
RWTexture2D<float4> DispFreqY;
RWTexture2D<float4> DispFreqZ;
//Slope frequencies
// RWTexture2D<float4> NX;
RWTexture2D<float4> NormFreqY;
// RWTexture2D<float4> NZ;

Texture2D Noise;

float Resolution;
//Patch world size
float L;
float F;
float2 U10;
float gamma;

float WaveSharpness;
float WaveHeight;

// float phillipsA;
// float phillipsSmallLength;
// float2 phillipsWindDir;

float Time;

//TODO Is there a better way to define PI?
float PI;
float g;

float2 test;
float2 test2;
float2 test3;
float2 test4;
float2 test5;

float energySpectrum(float w)
{
	// float F = 1400000;
	float U10Length = length(U10);
	float wp = 22 * pow((g * g) / (U10Length * F), 1.0 / 3.0);
	float s = wp <= w ? 0.07f : 0.09f;
	float r = exp(-pow(w - wp, 2) / (2 * s * s * wp * wp));
	float alpha = 0.076f * pow((U10Length * U10Length) / (F * g), 0.22f);
	// float gamma = 3.3f;
	return (alpha * g * g) / pow(w, 5) * exp(-5.0 / 4.0 * pow(wp / w, 4)) * pow(gamma, r);
}

float directionalSpread(float2 k)
{
	float2 nK = normalize(k);
	float thetaK = atan2(nK.y, nK.x);
	float2 nU10 = normalize(U10);
	float thetaU = atan2(nU10.y, nU10.x);
	float deltaTheta = thetaK - thetaU;
	deltaTheta = deltaTheta > PI ? deltaTheta - 2 * PI : deltaTheta;
	return (2.0 / PI) * pow(max(0.0, cos(deltaTheta * 0.5)), 2);
}


// float phillipsSpectrum(float2 k)
// {
// 	float V = length(U10);
// 	float kLen = length(k);
// 	return phillipsA * (exp(-1 / pow((kLen * (V * V / g)), 2)) / pow(kLen, 4)) * pow(abs(dot(normalize(k), normalize(phillipsWindDir))), 2) * exp(-pow(kLen * phillipsSmallLength, 2));
// }

float2 h0(float2 noise, float2 k, float omega)
{
	float domega = g / (2 * omega);
	float deltaK = 2 * PI / L;
	return 1.0 / sqrt(2) * noise * sqrt(2 * energySpectrum(omega) * directionalSpread(k) * domega * 1.0 / length(k) * deltaK * deltaK);
}

float2 complexMul(float2 a, float2 b)
{
	return float2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);
}

float2 conjugate(float2 a)
{
	return float2(a.x, -a.y);
}

float2 complexExponential(float theta)
{
	return float2(cos(theta), sin(theta));
}

//hFreq(k, t) = h0(k) * e^(iwt) + h0(-k) * e^(-iwt) (tess#43)
float2 hFreq(float omega, float2 h0, float2 h0Conjugate)
{
	return complexMul(h0, complexExponential(omega * Time)) + complexMul(h0Conjugate, complexExponential(-omega * Time));
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float epsilon = 0.0000001;
	//Adding epsilon to avoid k being null
	float2 k = 2.0 * PI * float2(id.x - Resolution / 2, id.y - Resolution / 2) / L;
	if (id.x == Resolution / 2 && id.y == Resolution / 2)
		k = float2(epsilon, epsilon);

	float omega = sqrt(g * length(k));

	float2 h0y = h0(Noise[id.xy].xy, k, omega);
	float2 h0ymk = conjugate(h0(Noise[id.xy].xy, -k, omega));
	float2 hy = hFreq(omega, h0y, h0ymk) * WaveHeight;
	DispFreqY[id.xy] = float4(hy, 0, 0);

	float2 hx = hFreq(
		omega,
		float2(-k.x / length(k) * h0y.y, k.x / length(k) * h0y.x),
		float2(k.x / length(k) * h0ymk.y, -k.x / length(k) * h0ymk.x)
	) * WaveSharpness;
	DispFreqX[id.xy] = float4(hx, 0, 0);

	float2 hz = hFreq(
		omega,
		float2(-k.y / length(k) * h0y.y, k.y / length(k) * h0y.x),
		float2(k.y / length(k) * h0ymk.y, -k.y / length(k) * h0ymk.x)
	) * WaveSharpness;
	DispFreqZ[id.xy] = float4(hz, 0, 0);

	float2 ikx = float2(0, k.x);
	float2 ikz = float2(0, k.y);
	float2 nyx = complexMul(ikx, hy);
	float2 nyz = complexMul(ikz, hy);
	NormFreqY[id.xy] = float4(nyx, nyz);

	//TODO Draw textures in ui with alpha 0
	//Setting alpha to 1 so it shows up on UI Toolkit, will probably cause issues
	{
		DispFreqY[id.xy] = float4(DispFreqY[id.xy].xyz, 1);
		DispFreqX[id.xy] = float4(DispFreqX[id.xy].xyz, 1);
		DispFreqZ[id.xy] = float4(DispFreqZ[id.xy].xyz, 1);
	}
}